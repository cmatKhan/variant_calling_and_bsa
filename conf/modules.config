/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

}

process {

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PREPARE INTERVALS
    withName: 'CREATE_INTERVALS_BED' {
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    // PICARD ADD READ GROUP
    withName: ADD_READ_GROUP {
        ext.prefix = { "${meta.id}_tagged" }
        ext.args = {[
            "-LB ${meta.id}",
            "-PL ILLUMINA",
            "-PU bc1",
            "-SM ${meta.id}",
            "--VERBOSITY DEBUG"
        ].join(' ').trim()}
    }

    withName: MARKDUPLICATES {
        ext.prefix = { "${meta.id}_markdup" }
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
    publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed"
        ]
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // CALL VARIANTS
    withName: 'TIDDIT_SV' {
        ext.args = [
            "-n ${params.ploidy}"
        ].join(' ').trim()
    }

    withName: 'FREEBAYES' {
        ext.args = [
            "-F ${params.min_alternate_fraction}",
            "--min-coverage ${params.freebayes_min_coverage}",
            "-p ${params.ploidy}",
            "--min-mapping-quality ${params.freebayes_min_map_qual}"
        ].join(' ').trim()
    }

    // ANNOTATE VARIANTS
    withName: 'SNPEFF' {
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}_snpEff" }
        ext.args         = [
            "-c ${projectDir}/assets/snpEff.config",
            "-v ${params.snpeff_config_key}"
            ].join(' ').trim()
        publishDir       = [
            [
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reports/snpeff/${meta.variantcaller}/${meta.id}/" },
                pattern: "*{csv,html,genes.txt}"
                //,
                //saveAs: { params.tools.split(',').contains('snpeff') ? it : null }
            ]
        ]
    }

    // ALL ANNOTATION TOOLS
    withName: TABIX_BGZIPTABIX {
        ext.prefix = { input.baseName.minus(".vcf") }
        publishDir = [
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/annotation/snpeff/${meta.id}/" },
            pattern: "*{gz,gz.tbi}"
        ]
    }


}
