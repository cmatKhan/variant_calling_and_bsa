/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

// default publishDir settings and misc processes
process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

// output genome reference related files
process {
    withName: '.*:INDEX_GENOME:.*' {
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/reference/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

// output genome reference related files
process {
    withName: '.*:PREPARE_INTERVALS:.*' {
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/reference/intervals/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_INTERVALLISTTOBED' {
        publishDir       = [
                enabled: params.save_reference,
                mode: params.publish_dir_mode,
                path: { "${params.outdir}/reference/intervals" },
                pattern: "*bed"
            ]
    }

    withName: 'TABIX_BGZIPTABIX_INTERVAL_SPLIT' {
        ext.prefix       = {"${meta.id}"}
        publishDir       = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference/intervals" },
            pattern: "*bed.gz"
        ]
    }
}

// configure BWAMEM2_ALIGNER subworkflow
process {

    withName: BWAMEM2_MEM {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_${meta.aligner}"}
    }

}

// configure NEXTGENMAP_YAHA subworkflow
process {
    withName: NEXTGENMAP{
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = {[
            "-X 100000000"
        ].join(' ').trim()}
    }

    withName: '.*:NEXTGENMAP_PARTITION:SAMTOOLS_SORT' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_sorted"}
    }

    withName: '.*:NEXTGENMAP_PARTITION:PICARD_MARKDUPLICATES' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_rmdup"}
        ext.args = {[
            "--REMOVE_DUPLICATES true"
        ].join(' ').trim()}

    }

    withName: '.*NEXTGENMAP_PARTITION:SAMTOOLS_INDEX' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_rmdup"}
    }


    withName: '.*NEXTGENMAP_PARTITION:EXTRACT_UMAP' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_umap"}
    }

    withName: '.*NEXTGENMAP_PARTITION:EXTRACT_MAPPED' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_ngm_mapped"}
        ext.args = {[
            // exclude unmapped, not primary alignments, platform failures and
            // supplmentary alignments
            // include header in out
            "-F2820 -h"
        ].join(' ').trim()}
    }

    withName: '.*NEXTGENMAP_PARTITION:SAMTOOLS_FASTQ' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*NEXTGENMAP_PARTITION:PEAR' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_merged"}
    }

    withName: '.*NEXTGENMAP_PARTITION:CAT_FASTQ' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/nextgenmap/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_merged"}
    }

    withName: YAHA_ALIGN{
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta_reads.id}_${meta_reads.aligner}"}
        ext.args = {[
            "-X 100000000"
        ].join(' ').trim()}
    }
}

// Post alignment, but still in alignment subworkflow
process {
    withName: '.*:ALIGN:PICARD_ADDORREPLACEREADGROUPS'{
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}_tagged" }
        ext.args = {[
            "-ID ${meta.id}",
            "-LB ${meta.id}",
            "-PL ILLUMINA",
            "-PU bc1",
            "-SM ${meta.id}",
            "--VERBOSITY DEBUG"
        ].join(' ').trim()}
    }

    withName: '.*:SAMTOOLS_SORT_INDEX_STATS:SAMTOOLS_SORT'{
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/alignment/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_${meta.aligner}_sorted"}
    }

    withName: '.*:SAMTOOLS_SORT_INDEX_STATS:PICARD_MARKDUPLICATES'{
        publishDir = [
            path: { "${params.outdir}/alignment/${meta.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_${meta.aligner}_sorted_markdups"}
    }

    withName: '.*:SAMTOOLS_SORT_INDEX_STATS:SAMTOOLS_INDEX'{
        publishDir = [
            path: { "${params.outdir}/alignment/${meta.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = {"${meta.id}_${meta.aligner}_sorted_markdups"}
    }

    withName: '.*:SAMTOOLS_SORT_INDEX_STATS:SAMTOOLS_BAM_STATS:.*'{
        publishDir = [
            path: { "${params.outdir}/alignment/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

process {

    // CALL VARIANTS
    withName: 'TIDDIT_SV' {
        publishDir = [
            path: { "${params.outdir}/variant_calling/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "-n ${params.ploidy}"
        ].join(' ').trim()
    }

    withName: 'FREEBAYES_INDIVIDUAL' {
        publishDir = [
            path: { "${params.outdir}/variant_calling/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "-F ${params.min_alternate_fraction}",
            "--min-coverage ${params.freebayes_min_coverage}",
            "-p ${params.ploidy}",
            "--min-mapping-quality ${params.freebayes_min_map_qual}"
        ].join(' ').trim()
    }

    withName: 'FREEBAYES_BATCH' {
        publishDir = [
            path: { "${params.outdir}/variant_calling/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.id}_${meta.aligner}" }
        ext.args = [
            "-F ${params.min_alternate_fraction}",
            "--min-coverage ${params.freebayes_min_coverage}",
            "-p ${params.ploidy}",
            "--min-mapping-quality ${params.freebayes_min_map_qual}"
        ].join(' ').trim()
    }

    // ANNOTATE VARIANTS
    withName: '.*:ANNOTATE:SNPEFF' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/variant_annote/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix       = { "${vcf.baseName.minus(".vcf")}_snpEff" }
        ext.args         = [
            "-v ${params.snpeff_config_key}"
            ].join(' ').trim()
    }

    withName: '.*:ANNOTATE:PICARD_SORTVCF' {
        publishDir = [
            enabled: params.save_intermediate,
            path: { "${params.outdir}/variant_annote/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ALL ANNOTATION TOOLS
    withName: TABIX_BGZIPTABIX {
        publishDir = [
            path: { "${params.outdir}/variant_annote/${meta.aligner}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { input.baseName.minus(".vcf") }
    }

}
