/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Nextflow config file for running full-size tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Defines input files and everything required to run a full size pipeline test.

    Use as follows:
        nextflow run nf-core/mblabcallvariants -profile test_full,<docker/singularity> --outdir <OUTDIR>

----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Full test profile'
    config_profile_description = 'Full test dataset to check pipeline function'

    // Input data for full size test
    // TODO nf-core: Specify the paths to your full test data ( on nf-core/test-datasets or directly in repositories, e.g. SRA)
    // TODO nf-core: Give any required params for the test so that command line flags are not needed
    input = 'https://raw.githubusercontent.com/nf-core/test-datasets/viralrecon/samplesheet/samplesheet_full_illumina_amplicon.csv'

    // Genome references
    fasta                      = "${projectDir}/assets/kn99_chr1_chr2.fasta"
    input                      = "${projectDir}/assets/genotype_check_samplesheet.csv"
    outdir                     = "results"
    max_memory                 = "20.0GB"
    max_cpus                   = 10
    aligners                   = "bwamem2"
    dusted_bed                 = "${projectDir}/assets/dustmasked.KN99.bed"
    snpeff_config_key          = 'ASM221672v1'
    ploidy                     = 1
    call_individual_variants   = true
    call_batch_variants        = false
    min_alternate_fraction     = 0.75
    freebayes_min_coverage     = 5
    freebayes_min_map_qual     = 30
    cnvpytor_conf_file         = "${projectDir}/assets/kn99_cnvpytor_genome_conf.py"
    cnvpytor_conf_gc_file      = "${projectDir}/assets/kn99_with_markers_gc.pytor"
}

process {

    withName: '.*FREEBAYES_.*' {
        cpus   = { check_max( 1    * task.attempt, 'cpus'    ) }
        memory = { check_max( 5.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 10.h * task.attempt, 'time'    ) }
    }

}
